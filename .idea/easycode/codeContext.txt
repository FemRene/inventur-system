<relevant_code>



<file file_path=/table/editRowWindow.py>
import tkinter as tk
from tkinter.ttk import Treeview, Combobox
from tkinter import ttk

def openWindow(table: Treeview):
    all_items = table.get_children()
    ids = [table.item(item, "values")[0] for item in all_items]

    root = tk.Tk()
    root.title("Edit Entry")
    root.minsize(200, 300)

    frame = tk.Frame(root)
    frame.pack(fill="both", expand=True, padx=10, pady=10)

    # ID Label and Entry
    label = tk.Label(frame, text="ID")
    label.pack
    entry_id = ttk.Combobox(frame, values=ids)
    entry_id.set("1")
    entry_id.pack(fill="x", padx=10)

    # ServiceTag Label and Entry
    label = tk.Label(frame, text="ServiceTag")
    label.pack(pady=10)
    entry_service_tag = tk.Entry(frame)
    entry_service_tag.pack(fill="x", padx=10)

    # Type Label and Entry
    label = tk.Label(frame, text="Type")
    label.pack(pady=10)
    entry_type = ttk.Combobox(frame, values=["PC", "Bildschirm", "Laptop", "Buch", "Stift"])
    entry_type.set("Select Type")
    entry_type.pack(fill="x", padx=10)

    # Raum Label and Entry
    label = tk.Label(frame, text="Raum")
    label.pack(pady=10)
    entry_raum = tk.Entry(frame)
    entry_raum.pack(fill="x", padx=10)

    # Add save Button
    save = tk.Button(root, text="Save", command=lambda: saveEdits(root,entry_id,table,entry_service_tag.get(),entry_type.get(),entry_raum.get()))
    save.pack(side="left", padx=5)

    # Add cancel Button
    save = tk.Button(root, text="Cancel", command=lambda: root.destroy())
    save.pack(side="right", padx=5)

    # Run the Tkinter event loop
    on_combobox_select(entry_id, table, entry_service_tag, entry_type, entry_raum)
    entry_id.bind("<<ComboboxSelected>>", lambda event: on_combobox_select(entry_id, table, entry_service_tag, entry_type, entry_raum))
    root.mainloop()

def on_combobox_select(box: Combobox, table: Treeview, service, typ, raum):
    selected_value = box.get()
    all_items = table.get_children()
    for item in all_items:
        item_id = table.item(item, "values")[0]
        if item_id == selected_value:
            row_values = table.item(item, "values")
            service.delete(0, tk.END)
            service.insert(0, row_values[1])
            typ.delete(0, tk.END)
            typ.insert(0, row_values[2])
            raum.delete(0, tk.END)
            raum.insert(0, row_values[3])

def saveEdits(window: tk.Tk, box: Combobox, table: Treeview, service, typ, raum):
    selected_value = box.get()
    all_items = table.get_children()
    for item in all_items:
        item_id = table.item(item, "values")[0]
        if item_id == selected_value:
            table.delete(item)
            table.insert("", tk.END, values=(selected_value, service, typ, raum))
            window.destroy()
</file>



<file file_path=/table/addRowWindow.py>
import tkinter as tk
from tkinter.ttk import Treeview
from tkinter import ttk

def openWindow(table: Treeview):
    # Get all entries from the table and find the highest ID
    all_items = table.get_children()
    ids = [int(table.item(item, "values")[0]) for item in all_items]
    highest_id = max(ids) if ids else 0

    # Create a new Tkinter window
    root = tk.Tk()
    root.title("Add a new Entry")
    root.minsize(200, 300)

    # Create a frame for better layout control
    frame = tk.Frame(root)
    frame.pack(fill="both", expand=True, padx=10, pady=10)

    # ID Label and Entry
    label = tk.Label(frame, text="ID")
    label.pack(pady=10)
    entry_id = tk.Entry(frame)
    entry_id.insert(0, str(highest_id + 1))
    entry_id.config(state="disabled")
    entry_id.pack(fill="x", padx=10)

    # ServiceTag Label and Entry
    label = tk.Label(frame, text="ServiceTag")
    label.pack(pady=10)
    entry_service_tag = tk.Entry(frame)
    entry_service_tag.pack(fill="x", padx=10)

    # Type Label and Entry
    label = tk.Label(frame, text="Type")
    label.pack(pady=10)
    entry_type = ttk.Combobox(frame, values=["PC", "Bildschirm", "Laptop", "Buch", "Stift"])
    entry_type.set("Select Type")
    entry_type.pack(fill="x", padx=10)

    # Raum Label and Entry
    label = tk.Label(frame, text="Raum")
    label.pack(pady=10)
    entry_raum = tk.Entry(frame)
    entry_raum.pack(fill="x", padx=10)

    # Add save Button
    save = tk.Button(root, text="Save", command=lambda: addToTree(root, table, entry_id.get(), entry_service_tag.get(), entry_type.get(), entry_raum.get()))
    save.pack(side="left", padx=5)

    # Add cancel Button
    save = tk.Button(root, text="Cancel", command=lambda: root.destroy())
    save.pack(side="right", padx=5)

    # Run the Tkinter event loop
    root.mainloop()

def addToTree(window: tk.Tk, table: Treeview, id, serviceTag, typ, raum):
    table.insert("", tk.END, values=(id, serviceTag, typ, raum))
    window.destroy()
</file>



<file file_path=/main.py>
hite')
    treeview.configure(bg='#2e2e2e', fg='white')


def toggle_theme():
    global dark_mode
    if not dark_mode:
        set_light_theme()
    else:
        set_dark_theme()
    dark_mode = not dark_mode


# Create the root window
root = tk.Tk()
root.title("")

# Set the minimum window size (optional)
root.minsize(600, 300)  # Minimum size to prevent collapsing

# Create a Style object to configure theme styles
root.style = ttk.Style()

# Define initial theme state
dark_mode = False

# Create a Treeview widget for the table
table = ttk.Treeview(root, columns=("ID", "ServiceTag", "Type", "Raum"), show='headings')

# Define the column headings with initial text
table.heading("ID", text="ID", command=lambda: sort_column(table, "ID", False))
table.heading("ServiceTag", text="ServiceTag", command=lambda: sort_column(table, "ServiceTag", False))
table.heading("Type", text="Type", command=lambda: sort_column(table, "Type", False))
table.heading("Raum", text="Raum", command=lambda: sort_column(table, "Raum", False))

# Define the column widths
table.column("ID", width=150, anchor='center')
table.column("ServiceTag", width=100, anchor='center')
table.column("Type", width=150, anchor='center')
table.column("Raum", width=150, anchor='center')

# Add data to the table
data = [
    ("1", "N9Hv1Zm5ba", "PC", "E-220"),
    ("2", "iXYXSA30ob", "BILDSCHIRM", "E-220"),
    ("3", "Inwwt8e7pO", "BILDSCHIRM", "E-220"),
    ("4", "xZyslUKTPO", "MAUS", "E-220"),
]

for row in data:
    table.insert("", tk.END, values=row)

# Configure grid layout: 25% for the empty field, 50% for the table, 25% for buttons
root.grid_columnconfigure(0, weight=1)  # 25% for empty field
root.grid_columnconfigure(1, weight=3)  # 50% for the table
root.grid_columnconfigure(2, weight=1)  # 25% for buttons

# Configure row expansion (add spacers to center the buttons)
root.grid_rowconfigure(0, weight=1)  # Spacer row at the top to push buttons down
root.grid_rowconfigure(1, weight=0)  # Button row
root.grid_rowconfigure(2, weight=0)  # Button row
root.grid_rowconfigure(3, weight=0)  # Button row
root.grid_rowconfigure(4, weight=1)  # Spacer row at the bottom to push buttons up

# Place the empty field in the grid (left side)
treeview = tk.Label(root, text="")
treeview.grid(row=0, column=0, padx=20, pady=20, rowspan=5, sticky="nsew")

# Place the table in the grid
table.grid(row=0, column=1, padx=20, pady=20, rowspan=5, sticky="nsew")

# Create buttons
button1 = tk.Button(root, text="Add", command=lambda: addRowWindow.openWindow(table))  # Pass function reference, not call
button2 = tk.Button(root, text="Edit", command=lambda: editRowWindow.openWindow(table))
button3 = tk.Button(root, text="Delete", command=lambda: deleteRow.deleteSelectedRow(table))

# Place buttons in the third column (25% space), centered vertically with equal space
button1.grid(row=1, column=2, padx=20, pady=10, sticky="ew")
button2.grid(row=2, column=2, padx=20, pady=10, sticky="ew")
button3.grid(row=3, column=2, padx=20, pady=10, sticky="ew")

# Add the theme toggle button
theme_button = tk.Button(root, text="Toggle Theme", command=toggle_theme)
theme_button.grid(row=0, column=2, padx=20, pady=20, sticky="ne")  # Upper right corner

# Apply initial theme
set_dark_theme()

# Run the application
root.mainloop()

</file>



<file file_path=/table/deleteRow.py>
from tkinter.ttk import Treeview

def deleteSelectedRow(table: Treeview):
    if table.selection():
        table.delete(table.focus())
</file>



</relevant_code>
